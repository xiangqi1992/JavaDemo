<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--
        完成bean对象创建
           bean标签
             id属性：唯一标识
             class属性：要创建对象所在类的全路径（包名称+类名称）
    -->

    <!--0、基于xml管理Bean-->
<!--
    <bean id="user" class="User"></bean>
-->

    <!--1.1、基于 setter方法 进行注入-->
<!--
    <bean id="user1" class="User">
        <property name="name" value="张三"></property>
        <property name="age" value="18"></property>
        <property name="gender" value="M"></property>
    </bean>
-->

    <!--1.2、基于 构造器 进行注入-->
<!--
    <bean id="user2" class="User">
        <constructor-arg name="name" value="李四"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="gender" value="M"></constructor-arg>
    </bean>
-->

    <!--2、特殊值处理-->
    <!--
    bean的作用域：
        单实例（默认）：singleton，IOC容器初始化时创建对象；
        多实例：prototype，获取bean时创建对象。
    -->
    <bean id="user" class="com.learning.spring.pojo.User" scope="singleton" init-method="initMethod" destroy-method="destroyMethod">
        <!-- 2.1、字面量赋值-->
        <property name="name" value="王五"></property>
        <!-- 2.2、null值-->
        <!--<property name="info"><null/></property>-->

        <!-- 2.3、xml实体-->
        <!-- 小于号在xml文档中用来定义标签的开始，不能随便使用 -->
        <!-- 解决方案一：使用xml实体来代替 -->
        <!--<property name="info" value="&lt;&gt;"></property>-->

        <!-- 2.4、CDATA节-->
        <!-- 解决方案二：使用CDATA节 -->
        <!-- CDATA中的c代表character，是文本、字符的含义，CDATA就表示纯文本数据 -->
        <!-- xml解析器看打CDATA节就知道这里是纯文本，就不会当做xml标签或属性来解析 -->
        <!-- 所以CDATA节中写什么符号都随意 -->
        <property name="info"><value><![CDATA[a < b]]></value></property>
    </bean>

    <bean id="myBeanProcessor" class="com.learning.spring.processor.MyBeanProcessor"/>

    <!--3、特殊值类型：对象、数组、集合-->
    <!-- 第一种方式：引入外部bean -->
    <bean id="dept" class="com.learning.spring.pojo.Dept">
        <property name="dname" value="安保部"></property>
    </bean>

    <bean id="emp" class="com.learning.spring.pojo.Emp">
        <property name="ename" value="lucy"></property>
        <property name="age" value="50"></property>

        <!--注入 对象 类型属性-->
        <!--ref属性：引用IOC容器中某个bean的id，将所有对应的bean为属性赋值-->
        <property name="dept" ref="dept"></property>

        <!--注入 数组 类型属性-->
        <property name="loves">
            <array>
                <value>吃饭</value>
                <value>睡觉</value>
                <value>看报</value>
            </array>
        </property>
    </bean>
    <!-- 第二种方式：内部bean注入 -->
    <bean id="emp2" class="com.learning.spring.pojo.Emp">
        <property name="ename" value="mary"></property>
        <property name="age" value="20"></property>
        <!--注入对象类型属性-->
        <!--在一个bean中再声明一个bean就是内部bean-->
        <!--内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性-->
        <property name="dept">
            <bean class="com.learning.spring.pojo.Dept">
                <property name="dname" value="财务部"></property>
            </bean>
        </property>
    </bean>
    <!-- 第三种方式：级联赋值-->
    <bean id="dept3" class="com.learning.spring.pojo.Dept">
        <property name="dname" value="技术研发部"></property>
    </bean>
    <bean id="emp3" class="com.learning.spring.pojo.Emp">
        <property name="ename" value="tom"></property>
        <property name="age" value="30"></property>
        <property name="dept" ref="dept3"></property>
        <property name="dept.dname" value="测试部"></property>
    </bean>

    <bean id="empone" class="com.learning.spring.pojo.Emp">
        <property name="ename" value="lucy"></property>
        <property name="age" value="20"></property>
    </bean>
    <bean id="emptwo" class="com.learning.spring.pojo.Emp">
        <property name="ename" value="mary"></property>
        <property name="age" value="30"></property>
    </bean>
    <bean id="dept4" class="com.learning.spring.pojo.Dept">
        <property name="dname" value="技术部"></property>
        <!--注入 list集合 类型属性-->
        <!---->
        <!--
        <property name="empList">
            <list>
                <ref bean="empone"></ref>
                <ref bean="emptwo"></ref>
            </list>
        </property>
        -->
        <!--注入 map集合 类型属性-->
        <!--
        <property name="empMap">
            <map>
                <entry>
                    <key>
                        <value>01</value>
                    </key>
                    <ref bean="empone"></ref>
                </entry>
                <entry>
                    <key>
                        <value>02</value>
                    </key>
                    <ref bean="emptwo"></ref>
                </entry>
            </map>
        </property>
        -->
        <!--引用集合类型的bean-->
        <property name="empList" ref="empList"></property>
        <property name="empMap" ref="empMap"></property>
    </bean>
    <!--list集合类型的bean-->
    <util:list id="empList">
        <ref bean="empone"></ref>
        <ref bean="emptwo"></ref>
    </util:list>
    <!--map集合类型的bean-->
    <util:map id="empMap">
        <entry>
            <key>
                <value>01</value>
            </key>
            <ref bean="empone"></ref>
        </entry>
        <entry>
            <key>
                <value>02</value>
            </key>
            <ref bean="emptwo"></ref>
        </entry>
    </util:map>

    <!--p命名空间注入-->
    <!--避免属性命名冲突-->
    <!--P命名空间注入就是利用set方式注入注入，如果实体类中没有set方法则无法注入-->
    <!--C命名空间注入是利用构造器注入，实体类中需要生成有参构造，没有则无法注入-->
    <bean id="dept5" class="com.learning.spring.pojo.Dept" p:dname="技术部" p:empList-ref="empList" p:empMap-ref="empMap"></bean>

    <!--引入外部属性文件 .properties .yaml-->
    <context:property-placeholder location="jdbc.properties"></context:property-placeholder>
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClassName" value="${jdbc.driver}"></property>
    </bean>

    <!--开启组件扫描-->
    <!--<context:component-scan base-package="com.learning.spring"></context:component-scan>-->
</beans>